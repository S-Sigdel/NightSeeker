// endorsementMiddleware.ts

import { configureProviders } from './api'; // Helper to set up providers
import { EndorsementApi } from './generated/EndorsementApi'; // Generated by Compact compiler
import { WalletApi } from '@midnight-ntwrk/wallet'; // Wallet connector

export async function initEndorsementMiddleware(wallet: WalletApi, config: any) {
  const providers = await configureProviders(wallet, config);
  const endorsement = new EndorsementApi(providers);

  // Endorse a worker by submitting a new commitment and rating
  async function endorse(commitment: Uint8Array, ratingValue: number) {
    // commitment: Bytes<32> generated off-chain (persistentHash of endorsement data)
    // ratingValue: Uint<8>
    return endorsement.endorse(commitment, ratingValue);
  }

  // Prove knowledge of the endorsement data (ZK proof handled by proof server)
  async function proveEndorsement(worker: Uint8Array, commitment: Uint8Array) {
    // worker: Bytes<32>, commitment: Bytes<32>
    return endorsement.prove_endorsement(worker, commitment);
  }

  // Get the public reputation score for a worker
  async function getReputation(worker: Uint8Array) {
    // worker: Bytes<32>
    return endorsement.get_reputation(worker);
  }

  return {
    endorse,
    proveEndorsement,
    getReputation,
  };
}
