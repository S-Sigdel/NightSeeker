pragma language_version 0.16;

import CompactStandardLibrary;

// --- Ledger State ---

// User public key -> skills commitment mapping
export ledger skillCommitments: Map<Bytes<32>, Bytes<32>>;

// --- Witnesses ---

// User's public key
witness userPk(): Bytes<32>;

// Secret skills data (hash preimage or serialized skills)
witness skillsSecret(): Bytes<32>;

// --- Circuits ---

// Add or update user's skills commitment
export circuit add_skill(commitment: Bytes<32>): [] {
  skillCommitments.insert(userPk(), commitment);
}

// Prove knowledge of skills data without revealing it
export circuit prove_skill(): [] {
  // Verify user knows skills data matching on-chain commitment
  assert(skillCommitments.lookup(userPk()) == persistentHash<[Bytes<32>]>([skillsSecret()]), "Invalid skill proof");
  // Additional ZK claims about skills can be added here
}

// Note: Skills data never revealed on-chain, only commitments and ZK proofs
